openapi: 3.1.0
servers:
  - url: http://localhost:8080/api
    description: Draupnir API server
info:
  title: Draupnir API
  description: The API for the Draupnir bot
  version: 0.1.0
  license:
    name: AFL-3.0
    url: https://github.com/the-draupnir-project/Draupnir/blob/main/LICENSES/AFL-3.0.txt
paths:
  /1/appservice/get/{bot_id}:
    get:
      operationId: getBotInfo
      summary: Get information about the bot
      tags:
        - Appservice
      security:
        - openidAuth: []
      parameters:
        - $ref: "#/components/parameters/DraupnirUserID"
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the bot to get information about
          example: "@example:example.com"
      responses:
        "200":
          description:
            The request was successful, and the server has returned the
            requested resource in the response body.
          content:
            application/json:
              schema:
                type: object
                properties:
                  managementRoom:
                    type: string
                    example: "!example:example.com"
                  ownerId:
                    type: string
                    example: "@example:example.com"
                  displayName:
                    type: string
                    example: "Example Bot"
                required:
                  - managementRoom
                  - ownerId
                  - displayName
        "400":
          description:
            The server could not understand the request due to invalid syntax.
            The client should modify the request and try again.
          content:
            application/json:
              schema:
                type: object
                required:
                  - errcode
                  - error
                properties:
                  errcode:
                    type: string
                    enum:
                      - "M_MISSING_PARAM"
                      - "M_INVALID_PARAM"
                  error:
                    type: string
                    enum:
                      - "Invalid user ID"
                      - "Missing X-Draupnir-UserID header"
                      - "Missing bot ID"
                      - "Invalid bot ID"
                    example: "Invalid user ID"
        "401":
          description:
            Authentication is required to access the requested resource. The
            client must include the appropriate credentials.
          content:
            application/json:
              schema:
                type: object
                required:
                  - errcode
                  - error
                properties:
                  errcode:
                    type: string
                    enum:
                      - "M_MISSING_TOKEN"
                  error:
                    type: string
                    enum:
                      - "Missing access token"
                      - "Missing or invalid openid token"
                      - "User ID does not match the one in the header"
                    example: "Missing access token"
        "404":
          description: The requested bot was not found on the server.
            The client should check the bot ID and try again.
          content:
            application/json:
              schema:
                type: object
                required:
                  - errcode
                  - error
                properties:
                  errcode:
                    type: string
                    enum:
                      - "M_NOT_FOUND"
                  error:
                    type: string
                    enum:
                      - "Bot not found"
                    example: "Bot not found"
        "503":
          description:
            The server is unable to handle the request. Possibly due to a misconfiguration.
            Are you sure this is an appservice draupnir?
          content:
            application/json:
              schema:
                type: object
                required:
                  - errcode
                  - error
                properties:
                  errcode:
                    type: string
                    enum:
                      - "M_NOT_CONFIGURED"
                  error:
                    type: string
                    enum:
                      - "Appservice manager not configured"
                    example: "Appservice manager not configured"

  /1/appservice/list:
    get:
      operationId: listBots
      summary: Get Bots for the requesting user
      tags:
        - Appservice
      security:
        - openidAuth: []
      parameters:
        - $ref: "#/components/parameters/DraupnirUserID"
        - name: onlyOwner
          in: query
          required: false
          schema:
            type: boolean
          description: Whether to only return bots owned by the user

      responses:
        "200":
          description:
            The request was successful, and the server has returned the
            requested resource in the response body.
          content:
            application/json:
              schema:
                type: object
                properties:
                  bots:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: "@example:example.com"
                        managementRoom:
                          type: string
                          example: "!example:example.com"
                        ownerID:
                          type: string
                          example: "@example:example.com"
                        displayName:
                          type: string
                          example: "Example Bot"
                      required:
                        - id
                        - managementRoom
                        - ownerID
                        - displayName
                required:
                  - bots
        "400":
          description:
            The server could not understand the request due to invalid syntax.
            The client should modify the request and try again.
          content:
            application/json:
              schema:
                type: object
                required:
                  - errcode
                  - error
                properties:
                  errcode:
                    type: string
                    enum:
                      - "M_INVALID_PARAM"
                  error:
                    type: string
                    enum:
                      - "Invalid user ID"
                      - "Missing X-Draupnir-UserID header"
                    example: "Invalid user ID"
        "401":
          description:
            Authentication is required to access the requested resource. The
            client must include the appropriate credentials.
          content:
            application/json:
              schema:
                type: object
                required:
                  - errcode
                  - error
                properties:
                  errcode:
                    type: string
                    enum:
                      - "M_MISSING_TOKEN"
                  error:
                    type: string
                    enum:
                      - "Missing access token"
                      - "Missing or invalid openid token"
                      - "User ID does not match the one in the header"
                    example: "Missing access token"
        "503":
          description:
            The server is unable to handle the request. Possibly due to a misconfiguration.
            Are you sure this is an appservice draupnir?
          content:
            application/json:
              schema:
                type: object
                required:
                  - errcode
                  - error
                properties:
                  errcode:
                    type: string
                    enum:
                      - "M_NOT_CONFIGURED"
                  error:
                    type: string
                    enum:
                      - "Appservice manager not configured"
                    example: "Appservice manager not configured"

  /1/appservice/provision:
    post:
      operationId: provisionBot
      summary: Provision a bot
      tags:
        - Appservice
      security:
        - openidAuth: []
      parameters:
        - $ref: "#/components/parameters/DraupnirUserID"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                protectedRooms:
                  type: array
                  items:
                    type: string
                    example: "!example:example.com"
      responses:
        "200":
          description:
            The request was successful, and the server has returned the
            requested resource in the response body.
          content:
            application/json:
              schema:
                type: object
                properties:
                  managementRoom:
                    type: string
                    example: "!example:example.com"
                  botID:
                    type: string
                    example: "@example:example.com"
                  ownerID:
                    type: string
                    example: "@example:example.com"
                required:
                  - bots
                  - managementRoom
                  - ownerID
        "400":
          description:
            The server could not understand the request due to invalid syntax.
            The client should modify the request and try again.
          content:
            application/json:
              schema:
                type: object
                required:
                  - errcode
                  - error
                properties:
                  errcode:
                    type: string
                    enum:
                      - "M_INVALID_PARAM"
                  error:
                    type: string
                    enum:
                      - "Invalid user ID"
                      - "Missing X-Draupnir-UserID header"
                    example: "Invalid user ID"
                  invalidIDs:
                    type: array
                    description: Invalid room IDs
                    items:
                      type: string
                      example: "!example:example.com"
                  failedIDs:
                    type: array
                    description: Rooms which draupnir failed to join or protect
                    items:
                      type: string
                      example: "!example:example.com"
        "401":
          description:
            Authentication is required to access the requested resource. The
            client must include the appropriate credentials.
          content:
            application/json:
              schema:
                type: object
                required:
                  - errcode
                  - error
                properties:
                  errcode:
                    type: string
                    enum:
                      - "M_MISSING_TOKEN"
                  error:
                    type: string
                    enum:
                      - "Missing access token"
                      - "Missing or invalid openid token"
                      - "User ID does not match the one in the header"
                    example: "Missing access token"
        "503":
          description:
            The server is unable to handle the request. Possibly due to a misconfiguration.
            Are you sure this is an appservice draupnir?
          content:
            application/json:
              schema:
                type: object
                required:
                  - errcode
                  - error
                properties:
                  errcode:
                    type: string
                    enum:
                      - "M_NOT_CONFIGURED"
                      - "M_INTERNAL_SERVER_ERROR"
                      - "M_UNKNOWN"
                  error:
                    type: string
                    enum:
                      - "Appservice manager not configured"
                      - "Failed to provision bot"
                      - "Failed to protect rooms because draupnir is not running. Unable to continue."
                    example: "Appservice manager not configured"

  /1/report/{room_id}/{event_id}:
    description: "Report an event to draupnir"
    post:
      operationId: messageReports
      summary: Send a report to draupnir
      tags:
        - Bot
      security:
        - bearerAuth: []
      # This is purely for reference
      servers:
        - url: http://localhost:8080/1
          description: Draupnir Bot API server.
      parameters:
        - name: room_id
          in: path
          schema:
            type: string
          required: true
          description: The room ID in which the reported event occurred
        - name: event_id
          in: path
          schema:
            type: string
          required: true
          description: The event ID of the event to report
      responses:
        "200":
          description:
            The request was successful, and the server has returned the
            requested resource in the response body.
          content:
            application/json:
              schema:
                type: object
                example: {}
        "400":
          description:
            The server could not understand the request due to invalid syntax.
            The client should modify the request and try again.
          content:
            application/json:
              schema:
                type: object
                properties:
                  errcode:
                    type: string
                    example: "M_BAD_REQUEST"
                  error:
                    type: string
                    enum:
                      - "Invalid room ID"
                      - "Invalid event ID"
                    example: "Invalid room ID"
                example:
                  errcode: "M_BAD_REQUEST"
                  error: "Invalid room ID"
        "401":
          description:
            Authentication is required to access the requested resource. The
            client must include the appropriate credentials.
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/BotUnauthenticatedError"
        "503":
          description:
            The server is currently unable to handle the request due to a
            temporary overload or maintenance of the server.

  /1/spam_check/user_may_invite:
    post:
      operationId: usersMayInvite
      summary: Check if a user is allowed to invite
      tags:
        - SpamChecker
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                inviter:
                  type: string
                  description: The user ID of the inviter
                invitee:
                  type: string
                  description: The user ID of the invitee
                room_id:
                  type: string
                  description: The room ID of the room
              required:
                - inviter
                - invitee
                - room_id
              example:
                inviter: "@example:example.com"
                invitee: "@example2:example.com"
                room_id: "!example:example.com"
      responses:
        "200":
          description:
            The request was successful, and the server has returned the
            requested resource in the response body.
          content:
            application/json:
              schema:
                type: object
                example: {}
        "400":
          description:
            The server could not understand the request due to invalid syntax.
            The client should modify the request and try again.
          content:
            application/json:
              schema:
                type: object
                properties:
                  errcode:
                    type: string
                    example: "M_INVALID_PARAM"
                  error:
                    type: string
                    enum:
                      - "Error handling inviter, invitee, and room_id"
                    example: "Invalid room ID"
                example:
                  errcode: "M_INVALID_PARAM"
                  error: "Error handling inviter, invitee, and room_id"
        "401":
          description:
            Authentication is required to access the requested resource. The
            client must include the appropriate credentials.
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/BotUnauthenticatedError"
  /1/spam_check/user_may_join_room:
    post:
      operationId: userMayJoinRoom
      summary: Check if a user is allowed to join a room
      tags:
        - SpamChecker
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: string
                  description: The user ID of the user joining the room
                room:
                  type: string
                  description: The room ID of the room to join
                is_invited:
                  type: boolean
                  description: Whether the user is invited to the room
              required:
                - user
                - room
                - is_invited
              example:
                user: "@example:example.com"
                room: "!example:example.com"
                is_invited: true
      responses:
        "200":
          description:
            The request was successful, and the server has returned the
            requested resource in the response body.
          content:
            application/json:
              schema:
                type: object
                example: {}
        "400":
          description:
            The server could not understand the request due to invalid syntax.
            The client should modify the request and try again.
          content:
            application/json:
              schema:
                type: object
                properties:
                  errcode:
                    type: string
                    example: "M_INVALID_PARAM"
                  error:
                    type: string
                    enum:
                      - "Error handling user, room, and is_invited"
                    example: "Invalid room ID"
                example:
                  errcode: "M_INVALID_PARAM"
                  error: "Error handling user, room, and is_invited"
        "401":
          description:
            Authentication is required to access the requested resource. The
            client must include the appropriate credentials.
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/BotUnauthenticatedError"
  /1/spam_check/check_event_for_spam:
    post:
      operationId: CheckEventForSpam
      summary: Check if an event is spam
      tags:
        - SpamChecker
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                event:
                  type: object
                  description: The event to check for spam
              required:
                - event
              example:
                event:
                  event_id: "$example_event_id"
                  origin_server_ts: 1234567890
                  type: "m.room.message"
                  sender: "@example:example.com"
                  content:
                    body: "This is a test message"
                    msgtype: "m.text"
                    formatted_body: "This is a test message"
      responses:
        "200":
          description:
            The request was successful, and the server has returned the
            requested resource in the response body.
          content:
            application/json:
              schema:
                type: object
                example: {}
        "400":
          description:
            The server could not understand the request due to invalid syntax.
            The client should modify the request and try again.
          content:
            application/json:
              schema:
                type: object
                properties:
                  errcode:
                    type: string
                    example: "M_INVALID_PARAM"
                  error:
                    type: string
                    enum:
                      - "Error handling event"
                    example: "Invalid room ID"
                example:
                  errcode: "M_INVALID_PARAM"
                  error: "Error handling event"
        "401":
          description:
            Authentication is required to access the requested resource. The
            client must include the appropriate credentials.
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/BotUnauthenticatedError"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: Matrix Access token
    openidAuth:
      type: http
      scheme: bearer
      bearerFormat: Matrix OpenID token
  schemas:
    BotUnauthenticatedError:
      type: string
      enum:
        - Missing access token
      example: Missing access token
  parameters:
    DraupnirUserID:
      name: X-Draupnir-UserID
      in: header
      required: true
      schema:
        type: string
      description: The user ID of the openID user. This must match the matrix id of the user that created the openid token.
      example: "@example:example.com"
